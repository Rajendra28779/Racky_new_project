import { DatePipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { environment } from 'src/environments/environment';
import Swal from 'sweetalert2';
import { HealthDeptDtlAdauthServiceService } from '../application/Services/health-dept-dtl-adauth-service.service';
import { TableUtil } from '../application/util/TableUtil';
import { JwtService } from '../services/jwt.service';
import { SessionStorageService } from '../services/session-storage.service';

@Component({
  selector: 'app-treatmenthistoryofurn',
  templateUrl: './treatmenthistoryofurn.component.html',
  styleUrls: ['./treatmenthistoryofurn.component.scss']
})
export class TreatmenthistoryofurnComponent implements OnInit {
  urn: any;
  urnDetails: any = [];
  token: any;
  showPegi: boolean;
  currentPage: any;
  pageElement: any;
  totalcount:any=0;
  txtsearchDate:any;
  user:any;
  schemeId:any;
  schememCategoryId:any;

  constructor(private rationcardserv:HealthDeptDtlAdauthServiceService,
    private jwtService: JwtService,
    private route: Router,  private sessionService: SessionStorageService) {
  }

  ngOnInit(): void {
    this.urn = localStorage.getItem("urnno");
    this.schemeId = localStorage.getItem("schemeId");
    this.schememCategoryId = localStorage.getItem("schememCategoryId");
    this.token = localStorage.getItem("token");
    this.user = this.sessionService.decryptSessionData("user");
    this.getTreatMentHistory();
  }
  getTreatMentHistory() {
    let urno = this.urn;
    this.rationcardserv.getlistthroughurn(urno, this.token,this.schemeId,this.schememCategoryId).subscribe(data => {
      this.urnDetails = data;
      this.totalcount=this.urnDetails.length;
      if(this.totalcount>0){
        this.showPegi=true
        this.currentPage=1
        this.pageElement=100
      }else{
        this.showPegi=false
        this.swal('Info', 'NO Record Found !', 'info');
      }
    },
      (error) => {
        console.log(error);
        this.swal('', 'Something went wrong.', 'error');
      });
  }
  getDetails(transactionId, claimId) {

  }
  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }

  report: any = [];
  urnWiseReport: any = {
    urn: "",
    patientName: "",
    caseNo: "",
    claimNumber: "",
    hospitalName: "",
    actualDateAdmission: "",
    actualDateDischarge: "",
    claimRaiseStatus: "",
    claimStatus: "",
    createdon: ""
  };

  heading = [['Sl No.', 'URN', 'Patient Name', 'Case No', 'Claim Number', 'Hospital Details', 'Actual Date Of Discharge', 'Actual Date Of Discharge',
    'Claim Raise Status', ' Claim Status', 'Claim Submitted On']];
  downloadList(type) {
    this.report = [];
    let item: any;
    for (var i = 0; i < this.urnDetails.length; i++) {
      item = this.urnDetails[i];
      this.urnWiseReport = [];
      this.urnWiseReport.slNo = i + 1;
      this.urnWiseReport.urn = item.urn;
      this.urnWiseReport.patientName = item.patientName;
      this.urnWiseReport.caseNo = item.caseNo!= null?item.caseNo:"N/A";
      this.urnWiseReport.claimNumber = item.claimNo!=null?item.claimNo:"N/A";
      this.urnWiseReport.hospitalName = item.hospitalName + '(' + item.hospitalCode + ')';
      this.urnWiseReport.actualDateAdmission = item.actualDateAdmission;
      this.urnWiseReport.actualDateDischarge = item.actualDateDischarge;
      this.urnWiseReport.claimRaiseStatus = item.claimRaiseStatus;
      this.urnWiseReport.claimStatus = item.claimStatus;
      this.urnWiseReport.createdon = this.convertStringToDate (item.createdon);

      this.report.push(this.urnWiseReport);
    }
    if (type == 1) {
      let filter = [];
      filter.push([['URN :-', this.urn]]);
      TableUtil.exportListToExcelWithFilter(this.report, "Treatment History Of URN", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('l', 'mm', [297, 210]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text("Treatment History Of URN", 110, 10);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'normal');
      doc.text('URN :- ' + this.urn, 15, 20);
      doc.text("Generated On: " + this.convertDate(new Date()), 180, 28);
      doc.text("Generated By: " +  this.user.fullName, 15, 28);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.urn;
        pdf[2] = clm.patientName;
        pdf[3] = clm.caseNo;
        pdf[4] = clm.claimNumber;
        pdf[5] = clm.hospitalName;
        pdf[6] = clm.actualDateAdmission;
        pdf[7] = clm.actualDateDischarge;
        pdf[8] = clm.claimRaiseStatus;
        pdf[9] = clm.claimStatus;
        pdf[10] = clm.createdon;

        rows.push(pdf);
      }
      console.log(rows);
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 35,
        headStyles: {
          fillColor: [26, 99, 54]
        },
        columnStyles: {
          0: { cellWidth: 10 },
          1: { cellWidth: 25 },
          2: { cellWidth: 25 },
          5: { cellWidth: 25 },
        }
      });
      doc.save('Bsky_Treatment History Of URN.pdf');
    }
  }
  convertStringToDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy, h:mm:ss a');
    return date;
  }

  convertDate(actualDateAdmission) {
    var datePipe = new DatePipe("en-US");
    actualDateAdmission = datePipe.transform(actualDateAdmission, 'dd-MMM-yyyy , h:mm:ss a');
    return actualDateAdmission;
  }

  Details(transactionId:any,claimId:any,urn:any){
    let clmId = claimId;
    if (clmId != null || clmId != undefined) {
      let state = {
        Urn: urn
      }
      localStorage.setItem("claimid", clmId);
      localStorage.setItem("trackingdetails", JSON.stringify(state));
      localStorage.setItem("token", this.jwtService.getJwtToken());
      this.route.navigate([]).then(result => { window.open(environment.routingUrl + '/trackingdetails'); });
    } else {
      let state = {
        txnid: transactionId,
        urn: urn
      }
      localStorage.setItem("history", JSON.stringify(state));
      localStorage.setItem("token", this.jwtService.getJwtToken())
      this.route.navigate([]).then(result => { window.open(environment.routingUrl + '/dischargelistHistoryHospital'); });
    }
  }
}

