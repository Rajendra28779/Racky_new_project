import { Component, OnInit } from '@angular/core';
import { ResetPasswordserviceService } from '../Services/reset-passwordservice.service';
import Swal from 'sweetalert2';
import { HeaderService } from '../header.service';
import { TableUtil } from '../util/TableUtil';
import jsPDF from 'jspdf';
import { DatePipe, formatDate } from '@angular/common';
import autoTable from 'jspdf-autotable';
import { SessionStorageService } from 'src/app/services/session-storage.service';
// import { HeaderService } from '../../header.service';
@Component({
  selector: 'app-reset-password',
  templateUrl: './reset-password.component.html',
  styleUrls: ['./reset-password.component.scss']
})
export class ResetPasswordComponent implements OnInit {
  record: any;
  currentPage: any;
  pageElement: any;
  showPegi: boolean;
  txtsearchDate: any;
  user: any;
  listData: any = [];
  detailData: any = [];

  constructor(private resetpasswordservice: ResetPasswordserviceService,
    public headerService: HeaderService,private sessionService: SessionStorageService) { }

  ngOnInit(): void {
    this.user = this.sessionService.decryptSessionData("user");
    this.headerService.setTitle("Reset Password");
    this.getList();
  }
  getList() {
    this.resetpasswordservice.getListDataForResetData(this.user.userId).subscribe((alldata:any) => {
      if(alldata.status==200){
        this.listData = alldata.data;
        this.record = this.listData.length;
        if (this.record > 0) {
          this.showPegi = true;
          this.currentPage = 1;
          this.pageElement = 100;
        }else {
          this.showPegi = false;
        }
    }else{
      this.swal("Error", "Something went wrong", 'error');
    }
    });
  }
  resetPassword(item: any) {
    Swal.fire({
      title: 'Are you sure?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, Reset The Password!',
      cancelButtonText: 'NO!!'
    }).then((result) => {
      if (result.isConfirmed) {
        let createdBy = this.user.userId;
        this.resetpasswordservice.resetPassword(item, createdBy).subscribe(
          (resp: any) => {
            if (resp.status == "Success") {
              this.swal('Success', resp.message, 'success');
              this.getList();
            }else {
              this.swal("Error", "Something went wrong", 'error');
            }
          });
      }
    })
  }

  viewData(item: any) {
    this.resetpasswordservice.viewResetData(item.userId).subscribe((resp:any) => {
      if(resp.status==200){
        this.detailData = resp.data;
      }else{
        this.swal("Error", "Something went wrong", 'error');
      }
    })
  }

  report: any = [];
  listDetail: any = {
    slNo: "",
    userName: "",
    fullname: "",
    groupTypeName: "",
    status: ""
  };

  heading = [['Sl No.', 'User Name', 'Full Name','User Type','Status']];
  downloadReport(type) {
    let generatedOn = formatDate(new Date(), 'dd-MMM-yyyy hh:mm:ss a', 'en-US').toString();
    let generatedBy =  this.user.fullName;
    this.report = [];
    let item: any;
    for (var i = 0; i < this.listData.length; i++) {
      item = this.listData[i];
      this.listDetail = [];
      this.listDetail.slNo = i + 1;
      this.listDetail.userName = item.userName;
      this.listDetail.fullname = item.fullname;
      this.listDetail.groupTypeName = item.groupname;
      this.listDetail.status = item.status;
      this.report.push(this.listDetail);
    }
    if (type == 1) {
      let filter = [];
      TableUtil.exportListToExcelWithFilter(this.report, "Reset Password List", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('p', 'mm', [297, 210]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text("Reset Password List", 75, 10);
      doc.setFontSize(14);
      doc.text("Generated By: " + generatedBy, 15, 18);
      doc.text("Generated On: " + generatedOn, 15, 26);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.userName;
        pdf[2] = clm.fullname;
        pdf[3] = clm.groupTypeName;
        pdf[4] = clm.status;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 32,
        headStyles: {
          fillColor: [26, 99, 54]
        },
        columnStyles: {
          0: { cellWidth: 10 },
          // 1: { cellWidth: 55 },
          // 2: { cellWidth: 55 },
          // 3: { cellWidth: 55 },
          // 4: { cellWidth: 30 }
        }
      });
      doc.save('GJAY_Reset Password List.pdf');
    }
  }
  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }
}
