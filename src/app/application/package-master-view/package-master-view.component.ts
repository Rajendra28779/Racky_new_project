import { CurrencyPipe, DatePipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { NavigationExtras, Router } from '@angular/router';
import { data } from 'jquery';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import Swal from 'sweetalert2';
import { HeaderService } from '../header.service';
import { PackageMasterserviceService } from '../Services/package-masterservice.service';
import { TableUtil } from '../util/TableUtil';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-package-master-view',
  templateUrl: './package-master-view.component.html',
  styleUrls: ['./package-master-view.component.scss']
})
export class PackageMasterViewComponent implements OnInit {
  user: any;
  record: any;
  currentPage: any;
  pageElement: any;
  showPegi: boolean;
  txtsearchDate: any;
  packageData: any = [];
  deleteDetails: any;
  status: any;
  id: any;
  constructor(private sessionService: SessionStorageService,private packageMasterserviceService: PackageMasterserviceService, private route: Router, public formBuilder: FormBuilder, public headerService: HeaderService) { }

  ngOnInit(): void {
    this.currentPage = 1;
    this.pageElement = 100;
    this.headerService.setTitle("View Package Master");
    this.user = this.sessionService.decryptSessionData("user");
    this.getPackageDetails();
  }
  getPackageDetails() {
    this.packageMasterserviceService.getPackage().subscribe((allData) => {
      this.packageData = allData;
      this.record = this.packageData.length;
      if (this.record > 0) {
        this.showPegi = true;
      }
      else {
        this.showPegi = false;
      }
    })
  }
  edit(id: any) {
    let navigateExtras: NavigationExtras = {
      state: {
        item: id
      }
    };
    this.route.navigate(['application/addpackage'], navigateExtras)
  }
  onPageBoundsCorrection(number: number) {
    this.currentPage = number;
  }

  report: any[];
  implant: any = {
    Slno: '',
    // procedureCode:'',
    procedureCode: '',
    procedures: '',
    statusFlag: ''
  };
  heading = [
    [
      'Sl#',
      'Procedure Code',
      'Procedure Name',
      'Status'
    ],
  ];

  downloadList(type) {
    // this.report = [];
    // let claim: any;
    this.report = [];
    let item: any;
    for (var i = 0; i < this.packageData.length; i++) {
      item = this.packageData[i];
      this.implant = [];
      this.implant.slNo = i + 1;
      this.implant.procedureCode = item.procedureCode;
      this.implant.procedures = item.procedures;
      this.implant.statusFlag = item.statusFlag;
      this.report.push(this.implant);
    }
    if (type == 1) {
      let filter = [];
      TableUtil.exportListToExcelWithFilter(this.report, "Package Master List", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('l', 'mm', [240, 220]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text("Package Master List", 100, 10);
      doc.setFontSize(12);
      doc.text("Generated On: " + this.convertDate(new Date()), 35, 33);
      doc.text("Generated By: " + this.user.fullName, 160, 33);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.procedureCode;
        pdf[2] = clm.procedures;
        pdf[3] = clm.statusFlag;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 40,
        headStyles: {
          fillColor: [26, 99, 54]
          // fillColor:[30,99,54]
        },
        columnStyles: {
          0: { cellWidth: 30 },
          1: { cellWidth: 45 },
          2: { cellWidth: 75 },
          3: { cellWidth: 45 }
        }
      });
      doc.save('GJAY_Package Master List.pdf');
    }
  }
  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }
  convertDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy hh:mm:ss a');
    return date;
  }
  convertCurrency(unitCyclePrice: any) {
    var formatter = new CurrencyPipe("en-US");
    unitCyclePrice = formatter.transform(unitCyclePrice, '', '');
    return unitCyclePrice;

  }

  pageItemChange() {
    this.pageElement = (<HTMLInputElement>document.getElementById("pageItem")).value;
  }
}
