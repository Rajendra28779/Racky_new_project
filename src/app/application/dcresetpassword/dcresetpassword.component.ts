import { Component, OnInit } from '@angular/core';
import { ResetPasswordserviceService } from '../Services/reset-passwordservice.service';
import Swal from 'sweetalert2';
import { HeaderService } from '../header.service';
import { DcresetpasswordServiceService } from '../Services/dcresetpassword-service.service';
import { TableUtil } from '../util/TableUtil';
import jsPDF from 'jspdf';
import { DatePipe } from '@angular/common';
import autoTable from 'jspdf-autotable';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-dcresetpassword',
  templateUrl: './dcresetpassword.component.html',
  styleUrls: ['./dcresetpassword.component.scss']
})
export class DcresetpasswordComponent implements OnInit {
  record: any;
  currentPage: any;
  pageElement: any;
  showPegi: boolean;
  txtsearchDate: any;
  isVisible: boolean = true;
  user1: any;
  data: any;
  listData: any = [];
  detailData: any = [];
  userId: any;
  constructor(private resetpasswordservice: ResetPasswordserviceService, private dcresetpasswordservice: DcresetpasswordServiceService, public headerService: HeaderService,private sessionService: SessionStorageService) { }

  ngOnInit(): void {
    this.user1 =  this.sessionService.decryptSessionData("user");
    this.userId = this.user1.userId
    this.headerService.setTitle("DC Reset Password");
    this.currentPage = 1;
    this.pageElement = 50;
    this.getList();
  }

  getList() {
    this.dcresetpasswordservice.getHospitalInfoForResetpassOfDC(this.user1.userId).subscribe((alldata) => {
      this.listData = alldata;
      this.record = this.listData.length;
      if (this.record > 0) {
        this.showPegi = true;
      }
      else {
        this.showPegi = false;
      }
    })
  }

  resetPassword(item: any) {
    Swal.fire({
      title: 'Are you sure?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, Reset The Password!',
      cancelButtonText: 'NO!!'
    }).then((result) => {
      if (result.isConfirmed) {
        let createdBy = this.user1.userId;
        this.resetpasswordservice.resetPassword(item, createdBy).subscribe(
          (resp: any) => {
            this.data = resp;
            if (this.data.status == "Success") {
              this.swal('Success', this.data.message, 'success')
            } else if (this.data.status == "Failed") {
              this.swal('Success', this.data.message, 'error')
            }
            else {
              this.swal("Error", "Something went wrong", 'error');
            }
            this.getList();
          },
          (err: any) => {
            this.swal("Error", "Something went wrong", 'error');
          }
        )
      }
    })
  }

  pageItemChange() {
    this.pageElement = (<HTMLInputElement>document.getElementById("pageItem")).value;
  }

  viewData(userId: any) {
    this.resetpasswordservice.viewResetData(userId).subscribe((resp) => {
      this.detailData = resp;
    })
  }
  report: any = [];
  listDetail: any = {
    slNo: "",
    hospitalCode: "",
    hospitalName: "",
    stateName: "",
    districtName: "",
    status: ""
  };

  heading = [['Sl No.', 'Hospital Code', 'Hospital Name', 'State', 'District', 'Status']];
  downloadReport(type) {
    this.report = [];
    let item: any;
    for (var i = 0; i < this.listData.length; i++) {
      item = this.listData[i];
      this.listDetail = [];
      this.listDetail.slNo = i + 1;
      this.listDetail.hospitalCode = item.hospitalCode;
      this.listDetail.hospitalName = item.hospitalName;
      this.listDetail.stateName = item.stateName;
      this.listDetail.districtName = item.districtName;
      if (item.status == '0') {
        this.listDetail.status = "Active";
      } else if (item.status == '1') {
        this.listDetail.status = "In Active";
      }
      this.report.push(this.listDetail);
    }
    if (type == 1) {
      let filter = [];
      TableUtil.exportListToExcelWithFilter(this.report, "DC Reset Password List", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('l', 'mm', [200, 220]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text("DC Reset Password List", 75, 20);
      doc.setFontSize(12);
      doc.text("Generated By: " + this.user1.fullName, 19, 33);
      doc.text("Generated On: " + this.convertDate(new Date()), 19, 40);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.hospitalCode;
        pdf[2] = clm.hospitalName;
        pdf[3] = clm.stateName;
        pdf[4] = clm.districtName;
        pdf[5] = clm.status;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 50,
        headStyles: {
          fillColor: [26, 99, 54]
        },
        columnStyles: {
          0: { cellWidth: 20 },
          1: { cellWidth: 25 },
          2: { cellWidth: 45 },
          3: { cellWidth: 30 },
          4: { cellWidth: 40 },
          5: { cellWidth: 20 }
        }
      });
      doc.save('DC Reset Password List.pdf');
    }
  }
  convertDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy hh:mm:ss a');
    return date;
  }

  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }

}
