import { Component, OnInit } from '@angular/core';
import { HeaderService } from '../../header.service';
import { Router } from '@angular/router';
import { ApprovalstatusreportserviceService } from '../../Services/approvalstatusreportservice.service';
import Swal from 'sweetalert2';
import { TableUtil } from '../../util/TableUtil';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { DatePipe, formatDate } from '@angular/common';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-approvalstatusreport',
  templateUrl: './approvalstatusreport.component.html',
  styleUrls: ['./approvalstatusreport.component.scss']
})
export class ApprovalstatusreportComponent implements OnInit {
  txtsearchDate: any;
  user: any;
  hospitallist: any = [];
  pageElement: any;
  showPegi: any;
  currentPage: any;
  record: any;
  fullname: any;
  hospitalList: any = [];
  username: any;
  timespan: any;

  constructor(
    public headerService: HeaderService,
    private route: Router,
    public approvalstatusreportservice: ApprovalstatusreportserviceService,
    private sessionService: SessionStorageService) { }

  ngOnInit(): void {
    this.headerService.setTitle('Hospital Speciality Tagging');
    this.user = this.sessionService.decryptSessionData("user");
    this.fullname = this.user.fullName + " (" + this.user.userName + ")"
    this.getHospitalList();

  }
  getHospitalList() {
    this.approvalstatusreportservice.getapprovallist(this.user.userName).subscribe(
      (data) => {
        this.hospitalList = data;
        this.record = this.hospitalList.length;
        if (this.record > 0) {
          this.currentPage = 1;
          this.pageElement = 100;
          this.showPegi = true;
        } else {
          this.showPegi = false;
        }
      });
  }
  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text,
    });
  }
  resetField() {
    window.location.reload();
  }
  report: any = [];
  sno: any = {
    Slno: '',
    SpecialityCode: '',
    SpecialityName: '',
    AppliedOn: '',
    ActionType: '',
    ActionOn: '',
    ActionBy: '',
  };
  heading = [
    [
      'Sl#',
      'Speciality Code',
      'Speciality Name',
      'Applied On',
      'Action Type',
      'Action On',
      'Action By',
    ],
  ];
  downloadReport(type) {
    this.report = [];
    let claim: any;
    for (var i = 0; i < this.hospitalList.length; i++) {
      claim = this.hospitalList[i];
      this.sno = [];
      this.sno.Slno = i + 1;
      this.sno.SpecialityCode = claim.packagecode
      this.sno.SpecialityName = claim.packagename;
      this.sno.AppliedOn = claim.appliedon;
      this.sno.ActionType = claim.actiontype;
      this.sno.ActionOn = claim.actionon;
      this.sno.ActionBy = claim.actionby;
      this.report.push(this.sno);
    }
    if (type == 'xcl') {
      let filter = [];
      filter.push([['Hospital Name :-', this.fullname]]);
      TableUtil.exportListToExcelWithFilter(
        this.report,
        'Approval Status  Report',
        this.heading, filter
      );
    }
    else if (type == 'pdf') {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('p', 'mm', [297, 210]);
      doc.setFontSize(20);
      doc.text("Approval Status ", 80, 10);
      doc.setFontSize(14);
      doc.text('Hospital Name :-' + this.fullname, 15, 26);
      doc.text('Generated By :- ' + this.user.fullName, 15, 42);
      doc.text('Generated On :' + formatDate(new Date(), 'dd-MMM-yyyy hh:mm:ss a', 'en-US').toString(), 15, 50);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.Slno;
        pdf[1] = clm.SpecialityCode;
        pdf[2] = clm.SpecialityName;
        pdf[3] = clm.AppliedOn;
        pdf[4] = clm.ActionType;
        pdf[5] = clm.ActionOn;
        pdf[6] = clm.ActionBy;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 55,
        headStyles: {
          fillColor: [26, 99, 54]
        },
        columnStyles: {
          0: { cellWidth: 10 },
        }
      });

      let j = doc.getNumberOfPages();
      doc.save('Approval Status Report.pdf');
    }
  }
}
