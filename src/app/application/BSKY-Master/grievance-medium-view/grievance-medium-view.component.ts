import { DatePipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { NavigationExtras, Router } from '@angular/router';
import jsPDF from 'jspdf';
import { HeaderService } from '../../header.service';
import { GrievanceMediumService } from '../../Services/grievance-medium.service';
import { TableUtil } from '../../util/TableUtil';
import autoTable from 'jspdf-autotable';
import Swal from 'sweetalert2';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-grievance-medium-view',
  templateUrl: './grievance-medium-view.component.html',
  styleUrls: ['./grievance-medium-view.component.scss']
})
export class GrievanceMediumViewComponent implements OnInit {
  txtsearchDate: any;
  record: any;
  currentPage: any;
  pageElement: any;
  showPegi: boolean;
  status: any;
  id: any;
  user: any;
  grievanceData: any = [];
  constructor(private route: Router, public formBuilder: FormBuilder, public headerService: HeaderService, private grievancemediumservice: GrievanceMediumService, private sessionService: SessionStorageService) { }

  ngOnInit(): void {
    this.currentPage = 1;
    this.pageElement = 50;
    this.headerService.setTitle("View Grievance Medium");
    this.user = this.sessionService.decryptSessionData("user");
    this.getGrievanceMediumDetails();
  }
  getGrievanceMediumDetails() {

    this.grievancemediumservice.getlist().subscribe((allData) => {
      this.grievanceData = allData;
      this.record = this.grievanceData.length;
      if (this.record > 0) {
        this.showPegi = true;
      }
      else {
        this.showPegi = false;
      }
    })
  }
  edit(id: any) {
    let navigateExtras: NavigationExtras = {
      state: {
        item: id
      }
    };
    this.route.navigate(['application/grievancemedium'], navigateExtras)
  }
  onPageBoundsCorrection(number: number) {
    this.currentPage = number;
  }

  report: any = [];
  packageDetail: any = {
    Slno: "",
    grivancemediumname: "",
    fullname: "",
    screatedate: "",
    statusFlag: ""
  };
  heading = [['Sl#', 'Grievance Medium', 'Created BY', 'Created On', 'Status']];

  downloadList(type) {
    this.report = [];
    let item: any;
    for (var i = 0; i < this.grievanceData.length; i++) {
      item = this.grievanceData[i];
      this.packageDetail = [];
      this.packageDetail.slNo = i + 1;
      this.packageDetail.grivancemediumname = item.grivancemediumname;
      this.packageDetail.fullname = item.createdby1.fullname;
      this.packageDetail.screatedate = this.convertDate1(item.screatedate);
      if (item.statusFlag == 0) {
        this.packageDetail.statusFlag = "Active";
      } else {
        this.packageDetail.statusFlag = "In-Active";
      }
      this.report.push(this.packageDetail);
    }
    if (type == 1) {
      let filter = [];
      TableUtil.exportListToExcelWithFilter(this.report, " Grievance Medium List", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('l', 'mm', [260, 230]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text(" Grievance Medium List", 110, 10);
      doc.setFontSize(12);
      doc.text("Generated On: " + this.convertDate(new Date()), 35, 33);
      doc.text("Generated By: " + JSON.parse(sessionStorage.getItem('user')).fullName, 150, 33);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.grivancemediumname;
        pdf[2] = clm.fullname;
        pdf[3] = clm.screatedate;
        pdf[4] = clm.statusFlag;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 40,
        headStyles: {
          fillColor: [26, 99, 54]
          // fillColor:[30,99,54]
        },
        columnStyles: {
          0: { cellWidth: 20 },
          1: { cellWidth: 25 },
          2: { cellWidth: 45 },
          3: { cellWidth: 35 },
          4: { cellWidth: 25 },
        }
      });
      doc.save('Grievance Medium List.pdf');
    }
  }

  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }
  convertDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy hh:mm:ss a');
    return date;
  }

  convertDate1(screatedate: any) {
    var datePipe = new DatePipe("en-US");
    screatedate = datePipe.transform(screatedate, 'dd-MMM-yyyy');
    return screatedate;
  }

  pageItemChange() {
    this.pageElement = (<HTMLInputElement>document.getElementById("pageItem")).value;
  }
}
