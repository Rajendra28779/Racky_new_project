import { Component, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { HeaderService } from '../../header.service';
import { VitalStatisticsService } from '../../Services/vital-statistics.service';
import Swal from 'sweetalert2';
import { TableUtil } from '../../util/TableUtil';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { DatePipe } from '@angular/common';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-vital-statistics-view',
  templateUrl: './vital-statistics-view.component.html',
  styleUrls: ['./vital-statistics-view.component.scss']
})
export class VitalStatisticsViewComponent implements OnInit {
  vitalStatisticsView: any=[];
  txtsearchDate: any;
  showPegi: boolean;
  record: any;
  currentPage: any;
  pageElement: any;



  constructor(public headerService: HeaderService,
    public fb: FormBuilder,
    public router: Router,
    public vitalStatisticsService: VitalStatisticsService,
    private sessionService: SessionStorageService) { }

  ngOnInit(): void {
    this.headerService.setTitle('View Vital Statistics');
    this.getAllData();
  }
  getAllData() {
    this.vitalStatisticsService.getalldata().subscribe((data: any) => {
      this.vitalStatisticsView = data;
      this.record = this.vitalStatisticsView?.length;
      if (this.record > 0) {
        this.currentPage = 1;
        this.pageElement = 50;
        this.showPegi = true;
      }
      else {
        this.showPegi = false;
      }
    })

  }
  delete(item: any) {

    Swal.fire({
      title: 'Are you sure?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        this.vitalStatisticsService.deletevitalStatistics(item).subscribe((data: any) => {
          if (data == 1) {
            Swal.fire(
              'Deleted!',
              'Record has been Inactivate.',
              'success'
            )
          }
          this.getAllData();
          (err: any) => {
          }
        })
      }
    })
  }
  edit(vitalStatisticsId: any) {
    this.router.navigate(['/application/addVitalStatistics', vitalStatisticsId]);
  }
  // downloadList(type){
  //   this.report = [];
  //   let packageP:any;
  //   for (var i = 0; i < this.vitalStatisticsView.length; i++) {
  //     packageP = this.vitalStatisticsView[i];
  //     this.vital = [];
  //     this.vital.Slno = i + 1;
  //     this.vital.vitalStatisticsName=packageP.vitalstatisticsname;
  //     this.vital.vitalStatisticsCode=packageP.vitalstatisticscode;
  //     this.vital.vitalStatisticsDescription=packageP.vitalstatisticsdescription;
  //     this.report.push(this.vital);
  //   }
  //   TableUtil.exportListToExcel(
  //     this.report, 'Vital Statistics', this.heading
  //   );
  // }

  report: any[];
  vital: any = {
    Slno: '',
    vitalStatisticsName: '',
    vitalStatisticsCode: '',
    vitalStatisticsDescription: ''
  };
  heading = [
    [
      'Sl#',
      'Vital Statistics Name',
      'Vital Statistics Code',
      'Vital Statistics Description'
    ],
  ];

  downloadList(type) {
    // this.report = [];
    // let claim: any;
    this.report = [];
    let item: any;
    for (var i = 0; i < this.vitalStatisticsView.length; i++) {
      let packageP = this.vitalStatisticsView[i];
      this.vital = [];
      this.vital.Slno = i + 1;
      this.vital.vitalStatisticsName = packageP.vitalstatisticsname;
      this.vital.vitalStatisticsCode = packageP.vitalstatisticscode;
      this.vital.vitalStatisticsDescription = packageP.vitalstatisticsdescription;
      this.report.push(this.vital);
    }
    if (type == 1) {
      let filter = [];
      TableUtil.exportListToExcelWithFilter(this.report, " Vital Statistics List", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('l', 'mm', [250, 230]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text(" Vital Statistics List", 110, 10);
      doc.setFontSize(12);
      doc.text("Generated On: " + this.convertDate(new Date()), 25, 33);
      doc.text("Generated By: " + this.sessionService.decryptSessionData("user").fullName, 140, 33);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.Slno;
        pdf[1] = clm.vitalStatisticsName;
        pdf[2] = clm.vitalStatisticsCode;
        pdf[3] = clm.vitalStatisticsDescription;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 40,
        headStyles: {
          fillColor: [26, 99, 54]
          // fillColor:[30,99,54]
        },
        columnStyles: {
          0: { cellWidth: 30 },
          1: { cellWidth: 55 },
          2: { cellWidth: 65 },
          3: { cellWidth: 45 },

        }
      });
      doc.save('GJAY_ Vital Statistics List.pdf');
    }
  }
  convertDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy hh:mm:ss a');
    return date;
  }
  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }

}
