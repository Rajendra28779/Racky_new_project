import { Component, OnInit } from '@angular/core';
import { HeaderService } from '../../header.service';
import { ImplantMasterService } from '../../Services/implant-master.service';
import { FormBuilder } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import Swal from 'sweetalert2';
import { TableUtil } from '../../util/TableUtil';
import { CurrencyPipe, DatePipe } from '@angular/common';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-implant-master-view',
  templateUrl: './implant-master-view.component.html',
  styleUrls: ['./implant-master-view.component.scss']
})
export class ImplantMasterViewComponent implements OnInit {
  currentPage: any;
  pageElement: any;
  txtsearchDate: any;
  showPegi: boolean;
  record: any;
  implantView: any=[];



  constructor(public headerService: HeaderService,
    public implantMasterService: ImplantMasterService,
    public fb: FormBuilder,
    public router: Router,
    private sessionService: SessionStorageService ) { }

  ngOnInit(): void {
    this.headerService.setTitle('View Implant Master');
    this.getallData();
  }
  getallData() {
    this.implantMasterService.getalldata().subscribe((data: any) => {
      this.implantView = data;

      this.record = this.implantView.length;
      if (this.record > 0) {
        this.currentPage = 1;
        this.pageElement = 100;
        this.showPegi = true;
      }
      for (var i = 0; i < this.implantView.length; i++) {
        var authCode = this.implantView[i];
        if (authCode.priceEditable == 'N') {
          authCode.priceEditable = "No"
        }
        if (authCode.priceEditable == 'Y') {
          authCode.priceEditable = "Yes"
        }
        if(authCode.unitEditable =='N'){
          authCode.unitEditable = "No"
        }
        if(authCode.unitEditable =='Y'){
          authCode.unitEditable = "Yes"
        }
      }
    });
  }
  delete(item: any) {
    Swal.fire({
      title: 'Are you sure?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        this.implantMasterService.deleteimplant(item).subscribe((data: any) => {
          if (data == 1) {
            Swal.fire(
              'Deleted!',
              'Record has been Inactivate.',
              'success'
            )
          }
          this.getallData();
          (err: any) => {
          }
        })
      }
    })
  }
  edit(implantId: any) {
    this.router.navigate(['/application/implant', implantId]);
  }

  report: any[];
  implant: any = {
    Slno: '',
    // procedureCode:'',
    implantCode:'',
    implantName:'',
    unit:'',
    maximumUnit:'',
    unitCyclePrice:'',
    priceEditable:'',
    unitEditable:'',
  };
  heading = [
    [
      'Sl#',
      'Implant Code',
      'Implant Name',
      'Unit',
      'Maximum Unit',
      'Unitcycle Price',
      'Price Editable',
      'Unit Editable'
    ],
  ];

  downloadList(type) {
    // this.report = [];
    // let claim: any;
    this.report = [];
    let item: any;
    for (var i = 0; i < this.implantView.length; i++) {
      item = this.implantView[i];
      this.implant = [];
      this.implant.slNo = i + 1;
      // this.sno = [];
      // this.sno.Slno = i + 1;
      // this.implant.procedureCode = item.procedureCode;
      this.implant.implantCode = item.implantCode;
      // this.implant.ProcedureCode = item.procedureCode;
      this.implant.implantName = item.implantName;
      this.implant.unit = item.unit;
      this.implant.maximumUnit = item.maximumUnit;
      this.implant.unitCyclePrice =this.convertCurrency(item.unitCyclePrice);
      this.implant.priceEditable = item.priceEditable;
      this.implant.unitEditable = item.unitEditable;


      this.report.push(this.implant);
    }
    if (type == 1) {
      let filter = [];
      TableUtil.exportListToExcelWithFilter(this.report, "Implant Master List", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('l', 'mm', [280, 260]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text("Implant Master List", 100, 10);
      doc.setFontSize(12);
      doc.text("Generated On: " + this.convertDate(new Date()), 35, 33);
      doc.text("Generated By: " + this.sessionService.decryptSessionData("user").fullName, 160, 33);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.implantCode;
        pdf[2] = clm.implantName;
        pdf[3] = clm.unit;
        pdf[4] = clm.maximumUnit;
        pdf[5] = clm.unitCyclePrice;
        pdf[6] = clm.priceEditable;
        pdf[7] = clm.unitEditable;

        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 40,
        headStyles: {
          fillColor: [26, 99, 54]
        },
        columnStyles: {
          0: { cellWidth: 10 },
          1: { cellWidth: 25 },
          2: { cellWidth: 65 },
          3: { cellWidth: 25 },
          4: { cellWidth: 30 },
          5: { cellWidth: 30 },
          6: { cellWidth: 25 },
          7: { cellWidth: 25 }
        }
      });
      doc.save('Implant Master List.pdf');
    }
  }
  convertCurrency(unitCyclePrice:any) {
   var formatter= new CurrencyPipe("en-US");
   unitCyclePrice=formatter.transform(unitCyclePrice,'','');
   return unitCyclePrice;

  }
  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }

  convertDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy hh:mm:ss a');
    return date;
  }

  }

