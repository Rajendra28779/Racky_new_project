import { DatePipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import Swal from 'sweetalert2';
import { HeaderService } from '../../header.service';
import { SnaremarkService } from '../../Services/snaremark.service';
import { TableUtil } from '../../util/TableUtil';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-snaremarkview',
  templateUrl: './snaremarkview.component.html',
  styleUrls: ['./snaremarkview.component.scss']
})
export class SnaremarkviewComponent implements OnInit {

  remarkView:any=[];
  currentPage: any;
  pageElement: any;
  txtsearchDate: any;
  showPegi: boolean;
  record: any;
  constructor(public headerService: HeaderService, public fb: FormBuilder,
    public router: Router, private sessionService: SessionStorageService,private snaremarkService: SnaremarkService) { }

  ngOnInit(): void {
    this.headerService.setTitle('SNA Remark View');
    this.getAllremarksData();

  }

  getAllremarksData(){
    this.snaremarkService.getallsnaRemarkData().subscribe((data:any)=>{
      this.remarkView=data;

      this.record = this.remarkView.length;
      if (this.record > 0) {
        this.currentPage = 1;
        this.pageElement = 50;
        this.showPegi = true;
      }
    });
  }

  edit(rmrk: any) {
    let objToSend: NavigationExtras = {
      state: {
        id: rmrk
      }
    };
    this.router.navigate(['/application/snaremarkadd'], objToSend);
  }

  report: any = [];
  remarkCPD: any = {
    slNo: "",
    remarks: ""

  };

  heading = [['Sl No.', 'Remark']];



  downloadReport(type) {

    this.report = [];
    let item: any;
    for (var i = 0; i < this.remarkView.length; i++) {
      item = this.remarkView[i];
      this.remarkCPD = [];
      this.remarkCPD.slNo = i + 1;
      this.remarkCPD.remarks = item.remarks;
      this.report.push(this.remarkCPD);
    }
    if (type == 1) {
      let filter = [];
      TableUtil.exportListToExcelWithFilter(this.report, "SNA Remark List", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('l', 'mm', [200, 220]);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text("SNA Remark List", 95, 20);
      doc.setFontSize(12);

      doc.text("Generated By: " + this.sessionService.decryptSessionData("user").fullName, 19, 33);
      doc.text("Generated On: " + this.convertDate(new Date()), 19, 40);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.remarks;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 50,
        headStyles: {
          fillColor: [26, 99, 54]
          // fillColor:[30,99,54]
        },
        columnStyles: {
          0: { cellWidth: 80 },
          1: { cellWidth: 115 },

        }
      });
      doc.save('GJAY_SNA Remark List.pdf');
    }
  }


  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });

  }

  convertDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy hh:mm:ss a');
    return date;
  }

}
