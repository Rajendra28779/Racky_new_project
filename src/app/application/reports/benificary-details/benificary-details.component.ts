import { DatePipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import Swal from 'sweetalert2';
import { HeaderService } from '../../header.service';
import { YearwiseGenderserviceService } from '../../Services/yearwise-genderservice.service';
import { TableUtil } from '../../util/TableUtil';
import { SessionStorageService } from 'src/app/services/session-storage.service';

@Component({
  selector: 'app-benificary-details',
  templateUrl: './benificary-details.component.html',
  styleUrls: ['./benificary-details.component.scss']
})
export class BenificaryDetailsComponent implements OnInit {
  showPegi: boolean;
  txtsearchDate: any;
  listData: any = [];
  pageElement: any;
  currentPage: any;
  user: any;
  gramwisedata: any = [];
  record: any;
  sum: number;
  sum1: number;
  sum2: number;
  blockId: any;
  districtId: any;
  gramId: any;
  villageId: any;
  village: any;
  gram: any;
  block: any;
  dist: any;
  rationcardno: any

  constructor(public headerService: HeaderService,private sessionService: SessionStorageService,
    private yearwiseGenderserviceService: YearwiseGenderserviceService, private route: Router) { }

  ngOnInit(): void {
    this.districtId = localStorage.getItem('districtId');
    this.blockId = localStorage.getItem('blockId');
    this.gramId = localStorage.getItem('gramId');
    this.villageId = localStorage.getItem('villageId');
    this.dist = localStorage.getItem('districtName');
    this.block = localStorage.getItem('blockName');
    this.gram = localStorage.getItem('gramName');
    this.village = localStorage.getItem('villageName');
    this.rationcardno = localStorage.getItem('rationcardno');
    this.gramwisedetails();
  }
  gramwisedetails() {
    this.yearwiseGenderserviceService.benificaryDetails(this.districtId, this.blockId, this.gramId, this.villageId).subscribe(
      (result) => {
        console.log(result);
        this.gramwisedata = [];
        this.gramwisedata = result;
        this.record = this.gramwisedata.length;
        if (this.record > 0) {
          this.currentPage = 1;
          this.pageElement = 100;
          this.showPegi = true;
        } else {
          this.showPegi = false;
        }
      },
      (error) => console.log(error)
    )
  }
  report: any = [];
  genderWiseGenderList: any = {
    slNo: "",
    rationCardNo: "",
    fullNameEng: "",
    fullNameOdia: "",
    adharName: "",
    gender: "",
    dateOfBirth: "",
    age: "",
    relationWithFamily: ""
  };
  heading = [['Sl No.', 'Ration Card Number', 'FullName', 'FullName(Odia)', 'Aadhar Number', 'Gender', 'Date Of Birth', 'Age', 'Relation With Family']];
  downloadReport(type) {
    this.report = [];
    let item: any;
    for (var i = 0; i < this.gramwisedata.length; i++) {
      item = this.gramwisedata[i];
      this.genderWiseGenderList = [];
      this.genderWiseGenderList.slNo = i + 1;
      this.genderWiseGenderList.rationCardNo = item.rationCardNo;
      this.genderWiseGenderList.fullNameEng = item.fullNameEng;
      this.genderWiseGenderList.fullNameOdia = item.fullNameOdia;
      this.genderWiseGenderList.adharName = item.adharName;
      this.genderWiseGenderList.gender = item.gender;
      this.genderWiseGenderList.dateOfBirth = this.convertDate1(item.dateOfBirth);
      this.genderWiseGenderList.age = item.age;
      this.genderWiseGenderList.relationWithFamily = item.relationWithFamily;
      this.report.push(this.genderWiseGenderList);
      console.log(this.report);
    }
    if (type == 1) {
      let filter = [];
      // filter.push([['Year :-', this.yearsget]]);
      filter.push([['District Name :-', this.dist]]);
      filter.push([['Block Name :-', this.block]]);
      filter.push([['No. Of RationCard Issued :-', this.rationcardno]]);
      filter.push([['Gram Panchayat Name :-', this.gram]]);
      filter.push([['Village Name :-', this.village]]);
      filter.push([['No. Of RationCard Issued :-', this.rationcardno]]);
      TableUtil.exportListToExcelWithFilter(this.report, "Beneficiary Details", this.heading, filter);
    } else if (type == 2) {
      if (this.report == null || this.report.length == 0) {
        this.swal("Info", "No Record Found", "info");
        return;
      }
      var doc = new jsPDF('p', 'mm', [380, 280]);
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text("Beneficiary Details", 120, 10);
      doc.setFontSize(12);
      doc.text("Generated On: " + this.convertDate(new Date()), 15, 20);
      doc.text("Generated By: " + this.sessionService.decryptSessionData("user").fullName, 175, 20);
      doc.text("District :-" + this.dist, 15, 30);
      doc.text("Block:-" + this.block, 85, 30);
      doc.text("Gram Panchayat :-" + this.gram, 125, 30);
      doc.text("Village:-" + this.village, 190, 30);
      doc.text("No. Of RationCard Issued:-" + this.rationcardno, 15, 40);
      var rows = [];
      for (var i = 0; i < this.report.length; i++) {
        var clm = this.report[i];
        var pdf = [];
        pdf[0] = clm.slNo;
        pdf[1] = clm.rationCardNo;
        pdf[2] = clm.fullNameEng;
        pdf[3] = 'N/A';
        pdf[4] = clm.adharName;
        pdf[5] = clm.gender;
        pdf[6] = clm.dateOfBirth;
        pdf[7] = clm.age;
        pdf[8] = clm.relationWithFamily;
        rows.push(pdf);
      }
      autoTable(doc, {
        head: this.heading,
        body: rows,
        theme: 'grid',
        startY: 55,
        headStyles: {
          fillColor: [26, 99, 54]
        },
        columnStyles: {
          0: { cellWidth: 10 },
          1: { cellWidth: 35 },
          2: { cellWidth: 35 },
          3: { cellWidth: 35 },
          4: { cellWidth: 35 },
          5: { cellWidth: 20 },
          6: { cellWidth: 30 },
          7: { cellWidth: 20 },
          8: { cellWidth: 30 },
        }
      });
      doc.save('Bsky_Beneficiary Details.pdf');
    }
  }
  swal(title: any, text: any, icon: any) {
    Swal.fire({
      icon: icon,
      title: title,
      text: text
    });
  }
  convertDate(date) {
    var datePipe = new DatePipe("en-US");
    date = datePipe.transform(date, 'dd-MMM-yyyy hh:mm:ss a', 'en-US');
    return date;
  }
  convertDate1(dateOfBirth) {
    var datePipe = new DatePipe("en-US");
    dateOfBirth = datePipe.transform(dateOfBirth, 'dd-MMM-yyyy');
    return dateOfBirth;
  }
}
